// Generated by gencpp from file bridge_px4/TrajTransferRequest.msg
// DO NOT EDIT!


#ifndef BRIDGE_PX4_MESSAGE_TRAJTRANSFERREQUEST_H
#define BRIDGE_PX4_MESSAGE_TRAJTRANSFERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bridge_px4
{
template <class ContainerAllocator>
struct TrajTransferRequest_
{
  typedef TrajTransferRequest_<ContainerAllocator> Type;

  TrajTransferRequest_()
    : hz(0)
    , N(0)
    , u_arr()
    , x_arr()
    , L_arr()  {
    }
  TrajTransferRequest_(const ContainerAllocator& _alloc)
    : hz(0)
    , N(0)
    , u_arr(_alloc)
    , x_arr(_alloc)
    , L_arr(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _hz_type;
  _hz_type hz;

   typedef int32_t _N_type;
  _N_type N;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _u_arr_type;
  _u_arr_type u_arr;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_arr_type;
  _x_arr_type x_arr;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _L_arr_type;
  _L_arr_type L_arr;





  typedef boost::shared_ptr< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajTransferRequest_

typedef ::bridge_px4::TrajTransferRequest_<std::allocator<void> > TrajTransferRequest;

typedef boost::shared_ptr< ::bridge_px4::TrajTransferRequest > TrajTransferRequestPtr;
typedef boost::shared_ptr< ::bridge_px4::TrajTransferRequest const> TrajTransferRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bridge_px4::TrajTransferRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bridge_px4

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7bec211c9c37912d6558392a02228ea4";
  }

  static const char* value(const ::bridge_px4::TrajTransferRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7bec211c9c37912dULL;
  static const uint64_t static_value2 = 0x6558392a02228ea4ULL;
};

template<class ContainerAllocator>
struct DataType< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bridge_px4/TrajTransferRequest";
  }

  static const char* value(const ::bridge_px4::TrajTransferRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"int32 hz\n"
"int32 N\n"
"float32[] u_arr\n"
"float32[] x_arr\n"
"float32[] L_arr\n"
;
  }

  static const char* value(const ::bridge_px4::TrajTransferRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hz);
      stream.next(m.N);
      stream.next(m.u_arr);
      stream.next(m.x_arr);
      stream.next(m.L_arr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajTransferRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bridge_px4::TrajTransferRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bridge_px4::TrajTransferRequest_<ContainerAllocator>& v)
  {
    s << indent << "hz: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hz);
    s << indent << "N: ";
    Printer<int32_t>::stream(s, indent + "  ", v.N);
    s << indent << "u_arr[]" << std::endl;
    for (size_t i = 0; i < v.u_arr.size(); ++i)
    {
      s << indent << "  u_arr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.u_arr[i]);
    }
    s << indent << "x_arr[]" << std::endl;
    for (size_t i = 0; i < v.x_arr.size(); ++i)
    {
      s << indent << "  x_arr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_arr[i]);
    }
    s << indent << "L_arr[]" << std::endl;
    for (size_t i = 0; i < v.L_arr.size(); ++i)
    {
      s << indent << "  L_arr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.L_arr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRIDGE_PX4_MESSAGE_TRAJTRANSFERREQUEST_H
