clear 

% Setup
model.dt = 0.05;
model.g = 9.81;
model.m = 0.1;
model.l = 1.5;

dyn_gen(model)

% Test
N = 200;
x0 = [pi/2 ; 0.0];
th = 0.3;

[Xact,Pdat] = data_gen(model,N,x0,th);

% Generate C matrices
xh  = [0.0 ; 0.0];
thh = 0.1;
[C,Xh] = C_calc(xh,thh,N);

% Gauss Newton
M1 = zeros(2,3);
for k = 1:N
    Ck = C(:,:,k);
    M1 = M1 + Ck'*Ck;
end

M

% % Plot
% figure(1)
% clf
% 
% Pact = th2xy(Xact(1,:),model.l);
% 
% h_dat = plot(Pdat(1,1),Pdat(2,1),'*');
% hold on
% h_act = plot(Pact(1,1),Pact(2,1),'o');
% 
% xlim([-1.5 1.5]);
% ylim([-2.0 1.0]);
% 
% for k = 2:N
%     h_act(1).XData = Pact(1,1:k);
%     h_act(1).YData = Pact(2,1:k);
%     
%     h_dat(1).XData = Pdat(1,1:k);
%     h_dat(1).YData = Pdat(2,1:k);
%     
%     drawnow
%     pause(0.05)
% end


% % Brute Force
% tic
% x_upd = x;
% for k = 1:N
%     x_upd = subs(f,x,x_upd);
% end
% 
% df_br = jacobian(x_upd,s);
% out_br = double(subs(df_br,s,s0))
% toc
% 
% % Recursive
% tic
% X = zeros(2,N);
% X(1:2,1) = s0(1:2);
% for k = 2:N
%     sk = [X(:,k-1) ; s0(3)];
%     X(:,k) = subs(f,s,sk);
% end
% out_rc = recursion(X,s0(3),N)
% toc
% 
% function r = recursion(X,th,k)
%     sk = [X(:,k) ; th];
%     if k > 1
%         dfk = df_calc(sk);
%         rk = [ recursion(X,th,k-1) ; 0.0 0.0 1.0];
% 
%         r = dfk*rk;
%     else
%         r = df_calc(sk);
%     end
% end