//
//  Academic License - for use in teaching, academic research, and meeting
//  course requirements at degree granting institutions only.  Not for
//  government, commercial, or other organizational use.
//
//  con_calc.cpp
//
//  Code generation for function 'con_calc'
//


// Include files
#include "con_calc.h"
#include "gate_con.h"
#include "rt_nonfinite.h"
#include <cmath>
#include <cstring>

// Function Definitions
void con_calc(const double x[6010], const double u[2400], double con[14424],
              double con_x[144240], double con_u[57600])
{
  double t2;
  double t3;
  double t4;
  double u_p_idx_3;

  //  Initialize Variables
  std::memset(&con[0], 0, 14424U * sizeof(double));
  std::memset(&con_x[0], 0, 144240U * sizeof(double));
  std::memset(&con_u[0], 0, 57600U * sizeof(double));
  for (int k = 0; k < 600; k++) {
    double d;
    double d1;
    double d2;
    double t10;
    double t16;
    double t8;
    double t9;
    double u_p_idx_1;
    double u_p_idx_2;
    int u_p_idx_1_tmp;
    if (k + 1 == 1) {
      u_p_idx_1 = 0.0;
      u_p_idx_2 = 0.0;
      u_p_idx_3 = 0.0;
    } else {
      u_p_idx_1_tmp = (k - 1) << 2;
      u_p_idx_1 = u[u_p_idx_1_tmp + 1];
      u_p_idx_2 = u[u_p_idx_1_tmp + 2];
      u_p_idx_3 = u[u_p_idx_1_tmp + 3];
    }

    // MOTOR_CON
    //     CON = MOTOR_CON(IN1,IN2,IN3)
    //     This function was generated by the Symbolic Math Toolbox version 8.6. 
    //     14-Jul-2021 21:15:57
    u_p_idx_1_tmp = k << 2;
    d = u[u_p_idx_1_tmp + 3];
    t2 = d * 23.0;
    t3 = u_p_idx_3 * 23.0;
    t4 = u[u_p_idx_1_tmp] / 4.0;
    d1 = u[u_p_idx_1_tmp + 1];
    t8 = d1 * 8.2203389830508478;
    d2 = u[u_p_idx_1_tmp + 2];
    t9 = d2 * 8.2203389830508478;
    t10 = u_p_idx_1 * 8.2203389830508478;
    u_p_idx_3 = u_p_idx_2 * 8.2203389830508478;
    t16 = d1 * d * 0.073728813559322023;
    u_p_idx_1 = d2 * d * 0.073728813559322023;
    u_p_idx_2 = (t3 + t4) + -t2;
    con[24 * k] = ((((((u_p_idx_2 + t10) + u_p_idx_3) + -t8) + -t9) + t16) +
                   -u_p_idx_1) - 5.2706;
    con[24 * k + 1] = ((((((u_p_idx_2 + t8) + t9) + -t10) + -u_p_idx_3) +
                        u_p_idx_1) + -t16) - 5.2706;
    u_p_idx_2 = (t2 + t4) + -t3;
    con[24 * k + 2] = ((((((u_p_idx_2 + t8) + u_p_idx_3) + -t9) + -t10) + t16) +
                       u_p_idx_1) - 5.2706;
    con[24 * k + 3] = ((((((u_p_idx_2 + t9) + t10) + -t8) + -u_p_idx_3) + -t16)
                       + -u_p_idx_1) - 5.2706;
    u_p_idx_2 = (t2 + -t3) + -t4;
    con[24 * k + 4] = (((((u_p_idx_2 + t8) + t9) + -t10) + -u_p_idx_3) +
                       u_p_idx_1) + -t16;
    con[24 * k + 5] = (((((u_p_idx_2 + t10) + u_p_idx_3) + -t8) + -t9) + t16) +
      -u_p_idx_1;
    u_p_idx_2 = (t3 + -t2) + -t4;
    con[24 * k + 6] = (((((u_p_idx_2 + t9) + t10) + -t8) + -u_p_idx_3) + -t16) +
      -u_p_idx_1;
    con[24 * k + 7] = (((((u_p_idx_2 + t8) + u_p_idx_3) + -t9) + -t10) + t16) +
      u_p_idx_1;
    for (u_p_idx_1_tmp = 0; u_p_idx_1_tmp < 10; u_p_idx_1_tmp++) {
      std::memset(&con_x[k * 240 + u_p_idx_1_tmp * 24], 0, 8U * sizeof(double));
    }

    // MOTOR_CON_U
    //     CON_U = MOTOR_CON_U(IN1,IN2,IN3)
    //     This function was generated by the Symbolic Math Toolbox version 8.6. 
    //     14-Jul-2021 21:15:57
    t2 = d1 * 0.073728813559322023;
    t3 = d2 * 0.073728813559322023;
    t4 = d * 0.073728813559322023;
    con_u[96 * k] = 0.25;
    con_u[96 * k + 1] = 0.25;
    con_u[96 * k + 2] = 0.25;
    con_u[96 * k + 3] = 0.25;
    con_u[96 * k + 4] = -0.25;
    con_u[96 * k + 5] = -0.25;
    con_u[96 * k + 6] = -0.25;
    con_u[96 * k + 7] = -0.25;
    con_u[96 * k + 24] = t4 - 8.2203389830508478;
    con_u[96 * k + 25] = -t4 + 8.2203389830508478;
    con_u[96 * k + 26] = t4 + 8.2203389830508478;
    con_u[96 * k + 27] = -t4 - 8.2203389830508478;
    con_u[96 * k + 28] = -t4 + 8.2203389830508478;
    con_u[96 * k + 29] = t4 - 8.2203389830508478;
    con_u[96 * k + 30] = -t4 - 8.2203389830508478;
    con_u[96 * k + 31] = t4 + 8.2203389830508478;
    con_u[96 * k + 48] = -t4 - 8.2203389830508478;
    con_u[96 * k + 49] = t4 + 8.2203389830508478;
    con_u[96 * k + 50] = t4 - 8.2203389830508478;
    con_u[96 * k + 51] = -t4 + 8.2203389830508478;
    con_u[96 * k + 52] = t4 + 8.2203389830508478;
    con_u[96 * k + 53] = -t4 - 8.2203389830508478;
    con_u[96 * k + 54] = -t4 + 8.2203389830508478;
    con_u[96 * k + 55] = t4 - 8.2203389830508478;
    u_p_idx_1 = t2 + -t3;
    con_u[96 * k + 72] = u_p_idx_1 - 23.0;
    u_p_idx_2 = t3 + -t2;
    con_u[96 * k + 73] = u_p_idx_2 - 23.0;
    t16 = t2 + t3;
    con_u[96 * k + 74] = t16 + 23.0;
    u_p_idx_3 = -t2 + -t3;
    con_u[96 * k + 75] = u_p_idx_3 + 23.0;
    con_u[96 * k + 76] = u_p_idx_2 + 23.0;
    con_u[96 * k + 77] = u_p_idx_1 + 23.0;
    con_u[96 * k + 78] = u_p_idx_3 - 23.0;
    con_u[96 * k + 79] = t16 - 23.0;
    if (std::abs(x[10 * k]) < 0.2) {
      gate_con(*(double (*)[10])&x[10 * k], *(double (*)[16])&con[24 * k + 8]);

      // GATE_CON_X
      //     CON_X = GATE_CON_X(IN1,IN2)
      //     This function was generated by the Symbolic Math Toolbox version 8.6. 
      //     14-Jul-2021 21:15:59
      t2 = x[10 * k + 6] * 0.00885;
      t3 = x[10 * k + 7] * 0.00885;
      t4 = x[10 * k + 8] * 0.00885;
      u_p_idx_3 = x[10 * k + 9] * 0.00885;
      con_x[240 * k + 8] = 0.0;
      con_x[240 * k + 9] = 0.0;
      con_x[240 * k + 10] = 0.0;
      con_x[240 * k + 11] = 0.0;
      con_x[240 * k + 12] = 0.0;
      con_x[240 * k + 13] = 0.0;
      con_x[240 * k + 14] = 0.0;
      con_x[240 * k + 15] = 0.0;
      con_x[240 * k + 16] = 0.0;
      con_x[240 * k + 17] = 0.0;
      con_x[240 * k + 18] = 0.0;
      con_x[240 * k + 19] = 0.0;
      con_x[240 * k + 20] = 0.0;
      con_x[240 * k + 21] = 0.0;
      con_x[240 * k + 22] = 0.0;
      con_x[240 * k + 23] = 0.0;
      con_x[240 * k + 32] = 0.0;
      con_x[240 * k + 33] = 0.0;
      con_x[240 * k + 34] = 0.0;
      con_x[240 * k + 35] = 0.0;
      con_x[240 * k + 36] = -0.05;
      con_x[240 * k + 37] = -0.05;
      con_x[240 * k + 38] = -0.05;
      con_x[240 * k + 39] = -0.05;
      con_x[240 * k + 40] = 0.0;
      con_x[240 * k + 41] = 0.0;
      con_x[240 * k + 42] = 0.0;
      con_x[240 * k + 43] = 0.0;
      con_x[240 * k + 44] = 0.05;
      con_x[240 * k + 45] = 0.05;
      con_x[240 * k + 46] = 0.05;
      con_x[240 * k + 47] = 0.05;
      con_x[240 * k + 56] = -0.05;
      con_x[240 * k + 57] = -0.05;
      con_x[240 * k + 58] = -0.05;
      con_x[240 * k + 59] = -0.05;
      con_x[240 * k + 60] = 0.0;
      con_x[240 * k + 61] = 0.0;
      con_x[240 * k + 62] = 0.0;
      con_x[240 * k + 63] = 0.0;
      con_x[240 * k + 64] = 0.05;
      con_x[240 * k + 65] = 0.05;
      con_x[240 * k + 66] = 0.05;
      con_x[240 * k + 67] = 0.05;
      con_x[240 * k + 68] = 0.0;
      con_x[240 * k + 69] = 0.0;
      con_x[240 * k + 70] = 0.0;
      con_x[240 * k + 71] = 0.0;
      con_x[240 * k + 80] = 0.0;
      con_x[240 * k + 81] = 0.0;
      con_x[240 * k + 82] = 0.0;
      con_x[240 * k + 83] = 0.0;
      con_x[240 * k + 84] = 0.0;
      con_x[240 * k + 85] = 0.0;
      con_x[240 * k + 86] = 0.0;
      con_x[240 * k + 87] = 0.0;
      con_x[240 * k + 88] = 0.0;
      con_x[240 * k + 89] = 0.0;
      con_x[240 * k + 90] = 0.0;
      con_x[240 * k + 91] = 0.0;
      con_x[240 * k + 92] = 0.0;
      con_x[240 * k + 93] = 0.0;
      con_x[240 * k + 94] = 0.0;
      con_x[240 * k + 95] = 0.0;
      con_x[240 * k + 104] = 0.0;
      con_x[240 * k + 105] = 0.0;
      con_x[240 * k + 106] = 0.0;
      con_x[240 * k + 107] = 0.0;
      con_x[240 * k + 108] = 0.0;
      con_x[240 * k + 109] = 0.0;
      con_x[240 * k + 110] = 0.0;
      con_x[240 * k + 111] = 0.0;
      con_x[240 * k + 112] = 0.0;
      con_x[240 * k + 113] = 0.0;
      con_x[240 * k + 114] = 0.0;
      con_x[240 * k + 115] = 0.0;
      con_x[240 * k + 116] = 0.0;
      con_x[240 * k + 117] = 0.0;
      con_x[240 * k + 118] = 0.0;
      con_x[240 * k + 119] = 0.0;
      con_x[240 * k + 128] = 0.0;
      con_x[240 * k + 129] = 0.0;
      con_x[240 * k + 130] = 0.0;
      con_x[240 * k + 131] = 0.0;
      con_x[240 * k + 132] = 0.0;
      con_x[240 * k + 133] = 0.0;
      con_x[240 * k + 134] = 0.0;
      con_x[240 * k + 135] = 0.0;
      con_x[240 * k + 136] = 0.0;
      con_x[240 * k + 137] = 0.0;
      con_x[240 * k + 138] = 0.0;
      con_x[240 * k + 139] = 0.0;
      con_x[240 * k + 140] = 0.0;
      con_x[240 * k + 141] = 0.0;
      con_x[240 * k + 142] = 0.0;
      con_x[240 * k + 143] = 0.0;
      con_x[240 * k + 152] = t4;
      con_x[240 * k + 153] = t3;
      con_x[240 * k + 154] = -t4;
      con_x[240 * k + 155] = -t3;
      con_x[240 * k + 156] = -u_p_idx_3;
      con_x[240 * k + 157] = t2;
      con_x[240 * k + 158] = u_p_idx_3;
      con_x[240 * k + 159] = -t2;
      con_x[240 * k + 160] = -t4;
      con_x[240 * k + 161] = -t3;
      con_x[240 * k + 162] = t4;
      con_x[240 * k + 163] = t3;
      con_x[240 * k + 164] = u_p_idx_3;
      con_x[240 * k + 165] = -t2;
      con_x[240 * k + 166] = -u_p_idx_3;
      con_x[240 * k + 167] = t2;
      con_x[240 * k + 176] = -u_p_idx_3;
      con_x[240 * k + 177] = t2;
      con_x[240 * k + 178] = u_p_idx_3;
      con_x[240 * k + 179] = -t2;
      con_x[240 * k + 180] = -t4;
      con_x[240 * k + 181] = -t3;
      con_x[240 * k + 182] = t4;
      con_x[240 * k + 183] = t3;
      con_x[240 * k + 184] = u_p_idx_3;
      con_x[240 * k + 185] = -t2;
      con_x[240 * k + 186] = -u_p_idx_3;
      con_x[240 * k + 187] = t2;
      con_x[240 * k + 188] = t4;
      con_x[240 * k + 189] = t3;
      con_x[240 * k + 190] = -t4;
      con_x[240 * k + 191] = -t3;
      con_x[240 * k + 200] = t2;
      con_x[240 * k + 201] = u_p_idx_3;
      con_x[240 * k + 202] = -t2;
      con_x[240 * k + 203] = -u_p_idx_3;
      con_x[240 * k + 204] = -t3;
      con_x[240 * k + 205] = t4;
      con_x[240 * k + 206] = t3;
      con_x[240 * k + 207] = -t4;
      con_x[240 * k + 208] = -t2;
      con_x[240 * k + 209] = -u_p_idx_3;
      con_x[240 * k + 210] = t2;
      con_x[240 * k + 211] = u_p_idx_3;
      con_x[240 * k + 212] = t3;
      con_x[240 * k + 213] = -t4;
      con_x[240 * k + 214] = -t3;
      con_x[240 * k + 215] = t4;
      con_x[240 * k + 224] = -t3;
      con_x[240 * k + 225] = t4;
      con_x[240 * k + 226] = t3;
      con_x[240 * k + 227] = -t4;
      con_x[240 * k + 228] = -t2;
      con_x[240 * k + 229] = -u_p_idx_3;
      con_x[240 * k + 230] = t2;
      con_x[240 * k + 231] = u_p_idx_3;
      con_x[240 * k + 232] = t3;
      con_x[240 * k + 233] = -t4;
      con_x[240 * k + 234] = -t3;
      con_x[240 * k + 235] = t4;
      con_x[240 * k + 236] = t2;
      con_x[240 * k + 237] = u_p_idx_3;
      con_x[240 * k + 238] = -t2;
      con_x[240 * k + 239] = -u_p_idx_3;
      for (u_p_idx_1_tmp = 0; u_p_idx_1_tmp < 4; u_p_idx_1_tmp++) {
        std::memset(&con_u[(k * 96 + u_p_idx_1_tmp * 24) + 8], 0, 16U * sizeof
                    (double));
      }
    }
  }

  if (std::abs(x[6000]) < 0.2) {
    gate_con(*(double (*)[10])&x[6000], *(double (*)[16])&con[14408]);

    // GATE_CON_X
    //     CON_X = GATE_CON_X(IN1,IN2)
    //     This function was generated by the Symbolic Math Toolbox version 8.6. 
    //     14-Jul-2021 21:15:59
    t2 = x[6006] * 0.00885;
    t3 = x[6007] * 0.00885;
    t4 = x[6008] * 0.00885;
    u_p_idx_3 = x[6009] * 0.00885;
    std::memset(&con_x[144008], 0, 15U * sizeof(double));
    con_x[144023] = 0.0;
    con_x[144032] = 0.0;
    con_x[144033] = 0.0;
    con_x[144034] = 0.0;
    con_x[144035] = 0.0;
    con_x[144036] = -0.05;
    con_x[144037] = -0.05;
    con_x[144038] = -0.05;
    con_x[144039] = -0.05;
    con_x[144040] = 0.0;
    con_x[144041] = 0.0;
    con_x[144042] = 0.0;
    con_x[144043] = 0.0;
    con_x[144044] = 0.05;
    con_x[144045] = 0.05;
    con_x[144046] = 0.05;
    con_x[144047] = 0.05;
    con_x[144056] = -0.05;
    con_x[144057] = -0.05;
    con_x[144058] = -0.05;
    con_x[144059] = -0.05;
    con_x[144060] = 0.0;
    con_x[144061] = 0.0;
    con_x[144062] = 0.0;
    con_x[144063] = 0.0;
    con_x[144064] = 0.05;
    con_x[144065] = 0.05;
    con_x[144066] = 0.05;
    con_x[144067] = 0.05;
    con_x[144068] = 0.0;
    con_x[144069] = 0.0;
    con_x[144070] = 0.0;
    con_x[144071] = 0.0;
    std::memset(&con_x[144080], 0, 15U * sizeof(double));
    con_x[144095] = 0.0;
    std::memset(&con_x[144104], 0, 15U * sizeof(double));
    con_x[144119] = 0.0;
    std::memset(&con_x[144128], 0, 16U * sizeof(double));
    con_x[144152] = t4;
    con_x[144153] = t3;
    con_x[144154] = -t4;
    con_x[144155] = -t3;
    con_x[144156] = -u_p_idx_3;
    con_x[144157] = t2;
    con_x[144158] = u_p_idx_3;
    con_x[144159] = -t2;
    con_x[144160] = -t4;
    con_x[144161] = -t3;
    con_x[144162] = t4;
    con_x[144163] = t3;
    con_x[144164] = u_p_idx_3;
    con_x[144165] = -t2;
    con_x[144166] = -u_p_idx_3;
    con_x[144167] = t2;
    con_x[144176] = -u_p_idx_3;
    con_x[144177] = t2;
    con_x[144178] = u_p_idx_3;
    con_x[144179] = -t2;
    con_x[144180] = -t4;
    con_x[144181] = -t3;
    con_x[144182] = t4;
    con_x[144183] = t3;
    con_x[144184] = u_p_idx_3;
    con_x[144185] = -t2;
    con_x[144186] = -u_p_idx_3;
    con_x[144187] = t2;
    con_x[144188] = t4;
    con_x[144189] = t3;
    con_x[144190] = -t4;
    con_x[144191] = -t3;
    con_x[144200] = t2;
    con_x[144201] = u_p_idx_3;
    con_x[144202] = -t2;
    con_x[144203] = -u_p_idx_3;
    con_x[144204] = -t3;
    con_x[144205] = t4;
    con_x[144206] = t3;
    con_x[144207] = -t4;
    con_x[144208] = -t2;
    con_x[144209] = -u_p_idx_3;
    con_x[144210] = t2;
    con_x[144211] = u_p_idx_3;
    con_x[144212] = t3;
    con_x[144213] = -t4;
    con_x[144214] = -t3;
    con_x[144215] = t4;
    con_x[144224] = -t3;
    con_x[144225] = t4;
    con_x[144226] = t3;
    con_x[144227] = -t4;
    con_x[144228] = -t2;
    con_x[144229] = -u_p_idx_3;
    con_x[144230] = t2;
    con_x[144231] = u_p_idx_3;
    con_x[144232] = t3;
    con_x[144233] = -t4;
    con_x[144234] = -t3;
    con_x[144235] = t4;
    con_x[144236] = t2;
    con_x[144237] = u_p_idx_3;
    con_x[144238] = -t2;
    con_x[144239] = -u_p_idx_3;
  }
}

// End of code generation (con_calc.cpp)
